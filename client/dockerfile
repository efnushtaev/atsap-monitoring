# Используем базовый образ с дополнительными инструментами сборки
FROM node:18-alpine AS deps

# Установка критически важных зависимостей
RUN apk add --no-cache python3 make g++ git openssh-client

# Создаем и переходим в рабочую директорию
WORKDIR /app

# Шаг 1: Копируем ТОЛЬКО файлы зависимостей
COPY package.json package-lock.json* ./

# Шаг 2: Чистим кэш и устанавливаем зависимости
RUN npm cache clean --force
RUN npm ci --no-optional || \ 
    (npm install --no-optional --legacy-peer-deps && npm cache clean --force)

# --------------------------------------------
# Этап сборки приложения
FROM node:18-alpine AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Устанавливаем переменные окружения для сборки
ENV NODE_OPTIONS="--max-old-space-size=4096"
ENV GENERATE_SOURCEMAP=false

RUN npm run build

# --------------------------------------------
# Финальный образ с Nginx
FROM nginx:1.25-alpine
COPY --from=builder /app/build /usr/share/nginx/html

# Опционально: копирование кастомной конфигурации
# COPY nginx.conf /etc/nginx/conf.d/default.conf

# Фиксим права для Nginx
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html